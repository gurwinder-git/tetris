{"version":3,"sources":["App.module.css","components/Grid/Grid.module.css","components/NextPiece/NextPiece.module.css","components/UI/StartButton/StartButton.module.css","components/StartGame/StartGame.module.css","components/UI/ControlButton/ControlButton.module.css","components/UI/MessagePopUp/MessagePopUp.module.css","components/Grid/Grid.js","components/NextPiece/NextPiece.js","components/UI/StartButton/StartButton.js","components/StartGame/StartGame.js","components/UI/ControlButton/ControlButton.js","components/UI/MessagePopUp/MessagePopUp.js","pieceCollection/pieceCollection.js","sound/cleraLine.mp3","sound/gameOver.mp3","App.js","index.js"],"names":["module","exports","Grid","grid","piece","projectioncoordinates","coordinates","previousCoordinates","virtualY","posY","length","y","x","undefined","posX","push","getProjectionCoordinates","id","css","map","line","col","classes","first","mergeData","indexOf","color","projection","className","join","NextPiece","nextProps","nextState","this","props","nextPieceGrid","React","Component","StartButton","start_button","onClick","clicked","children","StartGame","start_Game","ControlButton","icon","type","c_button","disabled","MessagePopUp","func","paused","gameOver","resumeGame","startGame","message","btnTextContent","Message_pop_up","pieceCollection","cleanGridSound","Audio","clearLine","gameOverSound","App","generateNextPieceIndex","Math","trunc","random","initGame","timerID","clearInterval","setState","buildGrid","nextPieceIndex","gameRunning","clearLines","generatePiece","setTimer","setInterval","state","pieceMoveToYAxis","levelToTime","gridHeight","gridWidth","closeGame","play","firstLineEmpty","i","floor","pieceCanBeMove","pieceMoveToXAxis","deltaX","deltaY","mergePieceToGrid","virtualGrid","forEach","item","split","cleanGridLine","cleanGrid","pre","totalScores","JSON","parse","localStorage","getItem","stringify","setItem","heighScore","rotatePiece","rotation","rotatedGrid","isPositionUpdate","lineCompleted","unshift","createLine","width","pauseGame","console","log","restartGame","window","confirm","score","document","addEventListener","event","keyCode","tetris_container","right_div","next_piece","scores","start_pause","guide","controls","intro","href","target","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.7522ce80.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"tetris_container\":\"App_tetris_container__1WnRO\",\"right_div\":\"App_right_div__3E5II\",\"next_piece\":\"App_next_piece__23_CD\",\"scores\":\"App_scores__1xSsP\",\"controls\":\"App_controls__1_i_v\",\"start_pause\":\"App_start_pause__2azgk\",\"guide\":\"App_guide__3Jg38\",\"intro\":\"App_intro__3CIq5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"grid\":\"Grid_grid__1eiNo\",\"first\":\"Grid_first__2x-Ly\",\"projection\":\"Grid_projection__dBRTJ\",\"color\":\"Grid_color__9jIRd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nextPieceGrid\":\"NextPiece_nextPieceGrid__csATf\",\"color\":\"NextPiece_color__s1_Bq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"start_button\":\"StartButton_start_button__2J2fl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"start_Game\":\"StartGame_start_Game__1YYL2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"c_button\":\"ControlButton_c_button__3m2-S\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Message_pop_up\":\"MessagePopUp_Message_pop_up__1KIP_\"};","import React from 'react'\r\nimport css from './Grid.module.css'\r\n\r\nfunction Grid({ grid, piece }) {\r\n    // console.log(piece.mergeData)\r\n    let projectioncoordinates = []\r\n    if (piece) {\r\n        projectioncoordinates = getProjectionCoordinates(grid, piece)\r\n        // console.log(projectioncoordinates)\r\n    }\r\n\r\n    return (\r\n        <div id={css.grid}>\r\n            {\r\n                grid.map((line, y) => {\r\n\r\n                    return line.map((col, x) => {\r\n\r\n                        const classes = []\r\n                        let textContent = 0\r\n\r\n                        if (x === 0) {\r\n                            classes.push(css.first)\r\n                        }\r\n\r\n                        //for piece\r\n                        if (piece) {\r\n                            // console.log(piece)\r\n                            if (piece.mergeData.indexOf(y + '_' + x) !== -1) {\r\n                                classes.push(css.color)\r\n                                textContent = piece.color\r\n                            }\r\n                        }\r\n\r\n                        //for grid\r\n                        if (grid[y][x] > 0) {\r\n                            classes.push(css.color)\r\n                            textContent = grid[y][x]\r\n                        }\r\n\r\n                        //for projection\r\n                        if (projectioncoordinates.length) {\r\n                            // console.log(projectioncoordinates)\r\n                            if (projectioncoordinates.indexOf(y + '_' + x) !== -1) {\r\n                                classes.push(css.projection)\r\n                            }\r\n                        }\r\n\r\n                        return (\r\n                            <span key={`${y}_${x}`} className={classes.join(' ')}>\r\n                                {\r\n                                    // textContent\r\n\r\n                                    // piece ?\r\n                                    //     piece.mergeData.indexOf(y + '_' + x) !== -1 ? '1' : grid[y][x] :\r\n                                    //     grid[y][x]\r\n                                }\r\n                            </span>\r\n                        )\r\n                    })\r\n                })\r\n            }\r\n        </div >\r\n    )\r\n}\r\n\r\nfunction getProjectionCoordinates(grid, piece) {\r\n    let coordinates = []\r\n    let previousCoordinates = []\r\n\r\n    for (let virtualY = piece.posY; virtualY < grid.length; virtualY++) {\r\n        previousCoordinates = coordinates\r\n        coordinates = []\r\n        for (let y = 0; y < piece.grid.length; y++) { //row\r\n            for (let x = 0; x < piece.grid[0].length; x++) { //col\r\n                // console.log(piece.grid[0].length) //  3 3 3 3 3 3\r\n                if (piece.grid[y][x] > 0) {\r\n\r\n                    if (virtualY < -1) return false\r\n\r\n                    if (grid[y + virtualY] === undefined) {\r\n                        return previousCoordinates\r\n                    }\r\n\r\n                    if (grid[y + virtualY][x + piece.posX] > 0) {\r\n                        return previousCoordinates\r\n                        // return false\r\n                    }\r\n\r\n                    coordinates.push((y + virtualY) + '_' + (x + piece.posX))\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return coordinates\r\n\r\n}\r\n\r\nexport default Grid\r\n","import React from 'react'\r\nimport css from './NextPiece.module.css'\r\n\r\nclass NextPiece extends React.Component {\r\n\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        if (nextProps.grid !== this.props.grid) {\r\n            return true\r\n        } else {\r\n            return false\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const grid = this.props.grid\r\n        return (\r\n            <div className={css.nextPieceGrid}>\r\n                {\r\n                    grid.map((line, y) => {\r\n\r\n                        return line.map((col, x) => {\r\n\r\n                            const classes = []\r\n                            let textContent = 0\r\n\r\n                            //for grid\r\n                            if (grid[y][x] > 0) {\r\n                                classes.push(css.color)\r\n                                textContent = grid[y][x]\r\n                            }\r\n\r\n                            return (\r\n                                <span key={`${y}_${x}`} className={classes.join(' ')}>\r\n                                    {/* {textContent} */}\r\n                                </span>\r\n                            )\r\n                        })\r\n                    })\r\n                }\r\n            </div >\r\n        )\r\n    }\r\n}\r\n\r\nexport default NextPiece\r\n","import React from 'react'\r\nimport css from './StartButton.module.css'\r\n\r\nfunction StartButton(props) {\r\n    return <button className={css.start_button} onClick={props.clicked}>{props.children}</button>\r\n}\r\n\r\nexport default StartButton\r\n","import React from 'react'\r\nimport StartButton from '../UI/StartButton/StartButton'\r\n\r\n//css\r\nimport css from './StartGame.module.css'\r\n\r\nfunction StartGame(props) {\r\n    return (\r\n        <div className={css.start_Game}>\r\n            <h1>Tetris</h1>\r\n            <StartButton clicked={props.clicked}>Start</StartButton>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default StartGame\r\n","import React from 'react'\r\nimport css from './ControlButton.module.css'\r\n\r\nfunction ControlButton(props) {\r\n    let timer = []\r\n    let icon = '^'\r\n    switch (props.type) {\r\n        case 'up':\r\n            icon = <i className=\"bi bi-caret-up-fill\"></i>\r\n            break\r\n\r\n        case 'left':\r\n            icon = <i className=\"bi bi-caret-left-fill\"></i>\r\n            break\r\n\r\n        case 'right':\r\n            icon = <i className=\"bi bi-caret-right-fill\"></i>\r\n            break\r\n\r\n        case 'down':\r\n            icon = <i className=\"bi bi-caret-down-fill\"></i>\r\n            break\r\n\r\n        default:\r\n            icon = '^'\r\n            break\r\n    }\r\n    return <button className={css.c_button} onClick={() => {\r\n        props.clicked()\r\n    }}\r\n        disabled={props.disabled}>{icon}</button>\r\n}\r\n\r\nexport default ControlButton\r\n","import React from 'react'\r\nimport css from './MessagePopUp.module.css'\r\n\r\n//component\r\nimport StartButton from '../StartButton/StartButton'\r\n\r\nfunction MessagePopUp({ paused, gameOver, resumeGame, startGame }) {\r\n    let message = ''\r\n    let func\r\n    let btnTextContent = ''\r\n    if (paused) {\r\n        message = 'Paused'\r\n        func = resumeGame\r\n        btnTextContent = 'Resume'\r\n    }\r\n    if (gameOver) {\r\n        message = 'Game over'\r\n        func = startGame\r\n        btnTextContent = 'Play again'\r\n    }\r\n    return (\r\n        <div className={css.Message_pop_up} >\r\n            {message}\r\n            <StartButton clicked={func}>{btnTextContent}</StartButton>\r\n        </div>\r\n    )\r\n}\r\nexport default MessagePopUp\r\n","export const pieceCollection = [\r\n\r\n    //S\r\n    [\r\n        [0, 0, 0, 0],\r\n        [0, 1, 1, 0],\r\n        [1, 1, 0, 0],\r\n        [0, 0, 0, 0]\r\n    ],\r\n\r\n    //L\r\n    [\r\n        [0, 0, 0, 0],\r\n        [0, 0, 1, 0],\r\n        [1, 1, 1, 0],\r\n        [0, 0, 0, 0]\r\n    ],\r\n\r\n    //I\r\n    [\r\n        [0, 0, 0, 0],\r\n        [1, 1, 1, 1],\r\n        [0, 0, 0, 0],\r\n        [0, 0, 0, 0]\r\n    ],\r\n\r\n    //J\r\n    [\r\n        [0, 0, 0, 0],\r\n        [1, 0, 0, 0],\r\n        [1, 1, 1, 0],\r\n        [0, 0, 0, 0]\r\n    ],\r\n\r\n    //T\r\n    [\r\n        [0, 0, 0, 0],\r\n        [1, 1, 1, 0],\r\n        [0, 1, 0, 0],\r\n        [0, 0, 0, 0]\r\n    ],\r\n\r\n    //O\r\n    [\r\n        [0, 0, 0, 0],\r\n        [0, 1, 1, 0],\r\n        [0, 1, 1, 0],\r\n        [0, 0, 0, 0]\r\n    ],\r\n\r\n    //Z\r\n    [\r\n        [0, 0, 0, 0],\r\n        [1, 1, 0, 0],\r\n        [0, 1, 1, 0],\r\n        [0, 0, 0, 0]\r\n    ],\r\n\r\n\r\n]\r\n\r\n","export default __webpack_public_path__ + \"static/media/cleraLine.8b898cc4.mp3\";","export default __webpack_public_path__ + \"static/media/gameOver.72cef8bb.mp3\";","import React, { Component } from 'react';\r\nimport css from './App.module.css'\r\n\r\n//componets\r\nimport Grid from './components/Grid/Grid'\r\nimport NextPiece from './components/NextPiece/NextPiece'\r\nimport StartGame from './components/StartGame/StartGame'\r\nimport ControlButton from './components/UI/ControlButton/ControlButton'\r\nimport MessagePopUp from './components/UI/MessagePopUp/MessagePopUp'\r\n\r\n//pices\r\nimport { pieceCollection } from './pieceCollection/pieceCollection'\r\n\r\n//music\r\nimport clearLine from './sound/cleraLine.mp3'\r\nimport gameOver from './sound/gameOver.mp3'\r\n\r\nconst cleanGridSound = new Audio(clearLine)\r\nconst gameOverSound = new Audio(gameOver)\r\n\r\n\r\n\r\nclass App extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            grid: null,\r\n            gridHeight: 18,\r\n            gridWidth: 10,\r\n            piece: null,\r\n            clearLines: 0,\r\n            nextPieceIndex: null,\r\n            gameRunning: false,\r\n            heighScore: 0,\r\n            paused: false,\r\n            gameOver: false\r\n        }\r\n        // this.buildGrid.bind(this)\r\n    }\r\n\r\n    generateNextPieceIndex = () => {\r\n        return Math.trunc(Math.random() * 7)\r\n    }\r\n\r\n    initGame = () => {\r\n        if (this.timerID) {\r\n            clearInterval(this.timerID)\r\n            // console.log(this.timerID)\r\n        }\r\n        this.setState({\r\n            grid: this.buildGrid(),\r\n            nextPieceIndex: this.generateNextPieceIndex(),\r\n            gameRunning: true,\r\n            paused: false,\r\n            clearLines: 0,\r\n            gameOver: false\r\n        }, () => {\r\n            this.generatePiece()\r\n            this.setTimer()\r\n        })\r\n    }\r\n\r\n    setTimer = () => {\r\n        this.timerID = setInterval(() => {\r\n            if (this.state.piece) {\r\n                this.pieceMoveToYAxis(1)\r\n            }\r\n        }, this.levelToTime())\r\n    }\r\n\r\n    levelToTime = () => {\r\n        const clearLines = this.state.clearLines\r\n\r\n        if (clearLines >= 0 && clearLines <= 3) return 1000\r\n        else if (clearLines >= 4 && clearLines <= 6) return 900\r\n        else if (clearLines >= 7 && clearLines <= 9) return 800\r\n        else if (clearLines >= 10 && clearLines <= 14) return 700\r\n        else return 700\r\n    }\r\n\r\n    componentDidMount() {\r\n        let score = JSON.parse(localStorage.getItem('highScore'))\r\n\r\n        if (score) {\r\n            this.setState({ heighScore: score })\r\n        } else {\r\n            this.setState({ heighScore: score })\r\n        }\r\n        document.addEventListener('keydown', (event) => {\r\n            if (!this.state.paused) {\r\n                // console.log(event.keyCode)\r\n                if (this.state.piece) {\r\n                    switch (event.keyCode) {\r\n                        case 39:\r\n                            this.pieceMoveToXAxis(1)\r\n                            break;\r\n\r\n                        case 37:\r\n                            this.pieceMoveToXAxis(-1)\r\n                            break;\r\n\r\n                        case 40:\r\n                            this.pieceMoveToYAxis(1)\r\n                            break;\r\n\r\n                        case 88:\r\n                            this.rotatePiece('right')\r\n\r\n                            break;\r\n\r\n                        case 90:\r\n                            this.rotatePiece('left')\r\n                            break;\r\n\r\n                        default:\r\n                            break;\r\n                    }\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    buildGrid = () => {\r\n        let grid = []\r\n\r\n        for (let y = 0; y < this.state.gridHeight; y++) {\r\n            let line = []\r\n            for (let x = 0; x < this.state.gridWidth; x++) {\r\n                line.push(0)\r\n            }\r\n            grid.push(line)\r\n        }\r\n\r\n        return grid\r\n    }\r\n\r\n    closeGame = () => {\r\n        // console.log('game over')\r\n        clearInterval(this.timerID)\r\n        this.setState({ gameOver: true })\r\n        gameOverSound.play()\r\n    }\r\n\r\n    //Get piece\r\n    generatePiece = () => {\r\n        const piece = {}\r\n        piece.posY = 0\r\n        piece.posX = 0\r\n        piece.grid = pieceCollection[this.state.nextPieceIndex]\r\n        piece.mergeData = []\r\n        piece.color = Math.trunc(Math.random() * 5) + 1\r\n\r\n        let firstLineEmpty = true\r\n        for (let i = 0; i < piece.grid[0].length; i++) {\r\n            if (piece.grid[0][i] > 0) {\r\n                firstLineEmpty = false\r\n            }\r\n        }\r\n\r\n        if (firstLineEmpty) {\r\n            piece.posY--\r\n        }\r\n\r\n        piece.posX = Math.floor((this.state.gridWidth - piece.grid[0].length) / 2)\r\n\r\n\r\n\r\n        const coordinates = this.pieceCanBeMove(piece)\r\n\r\n        if (coordinates) {\r\n            piece.mergeData = coordinates\r\n            this.setState({ piece, nextPieceIndex: this.generateNextPieceIndex() })\r\n        } else {\r\n            this.closeGame()\r\n        }\r\n    }\r\n\r\n    pieceCanBeMove = (piece) => {\r\n\r\n        const coordinates = []\r\n\r\n        for (let y = 0; y < piece.grid.length; y++) { //row\r\n            for (let x = 0; x < piece.grid[0].length; x++) { //col\r\n\r\n                // console.log(piece.grid[0].length) //  3 3 3 3 3 3\r\n\r\n                if (piece.grid[y][x] > 0) {\r\n\r\n                    // console.log('row', y + piece.posY)\r\n                    // console.log('col', x + piece.posX)\r\n                    // console.log(this.state.grid[y + piece.posY][x + piece.posX])\r\n\r\n                    if (this.state.grid[y + piece.posY] === undefined) return false\r\n\r\n                    if (this.state.grid[y + piece.posY][x + piece.posX] === undefined) return false\r\n\r\n\r\n                    if (this.state.grid[y + piece.posY][x + piece.posX] > 0) {\r\n                        return false\r\n                    }\r\n\r\n                    coordinates.push((y + piece.posY) + '_' + (x + piece.posX))\r\n                }\r\n            }\r\n        }\r\n        return coordinates\r\n    }\r\n\r\n    pieceMoveToXAxis = (deltaX) => {\r\n        const piece = { ...this.state.piece }\r\n\r\n        if (piece === null) {\r\n            return false\r\n        }\r\n\r\n        piece.posX += deltaX\r\n\r\n        const coordinates = this.pieceCanBeMove(piece)\r\n\r\n        if (coordinates) {\r\n            piece.mergeData = coordinates\r\n            // console.log(coordinates)\r\n            this.setState({ piece })\r\n        }\r\n    }\r\n\r\n    pieceMoveToYAxis = (deltaY) => {\r\n        const piece = { ...this.state.piece }\r\n\r\n        if (!piece) {\r\n            return false\r\n        }\r\n\r\n        piece.posY += deltaY\r\n\r\n        const coordinates = this.pieceCanBeMove(piece)\r\n\r\n        if (coordinates) {\r\n            piece.mergeData = coordinates\r\n            // console.log(coordinates)\r\n            this.setState({ piece })\r\n        } else {\r\n            this.mergePieceToGrid()\r\n        }\r\n    }\r\n\r\n    mergePieceToGrid = () => {\r\n        const virtualGrid = this.state.grid\r\n\r\n        this.state.piece.mergeData.forEach(item => {\r\n            const [y, x] = item.split('_')\r\n            virtualGrid[+y][+x] = this.state.piece.color\r\n        })\r\n\r\n        const { clearLines, cleanGrid } = this.cleanGridLine(virtualGrid)\r\n\r\n\r\n        this.setState((pre) => {\r\n            let totalScores = pre.clearLines + clearLines\r\n            let totalScoresInlocalStorage = JSON.parse(localStorage.getItem('highScore'))\r\n\r\n            if (totalScores > totalScoresInlocalStorage) {\r\n                JSON.stringify(localStorage.setItem('highScore', totalScores))\r\n            }\r\n\r\n            return {\r\n                grid: cleanGrid,\r\n                piece: null,\r\n                clearLines: totalScores,\r\n                heighScore: JSON.parse(localStorage.getItem('highScore'))\r\n            }\r\n        }, () => {\r\n            this.generatePiece()\r\n            clearInterval(this.timerID)\r\n            this.setTimer()\r\n        })\r\n\r\n    }\r\n\r\n    rotatePiece = (rotation) => {\r\n        const piece = { ...this.state.piece }\r\n        // console.log(piece)\r\n\r\n        if (piece === null) return false\r\n\r\n        let rotatedGrid = []\r\n\r\n        if (rotation === 'right') {\r\n            for (let x = 0; x < piece.grid[0].length; x++) {\r\n                const line = []\r\n                for (let y = piece.grid.length - 1; y > -1; y--) {\r\n                    // console.log(y + '_' + x, '=>', piece.grid[y][x])\r\n                    line.push(piece.grid[y][x])\r\n                }\r\n                rotatedGrid.push(line)\r\n            }\r\n        }\r\n\r\n        if (rotation === 'left') {\r\n            for (let x = piece.grid[0].length - 1; x > -1; x--) {\r\n                const line = []\r\n                for (let y = 0; y < piece.grid.length; y++) {\r\n                    line.push(piece.grid[y][x])\r\n                }\r\n                rotatedGrid.push(line)\r\n            }\r\n        }\r\n\r\n        piece.grid = rotatedGrid\r\n\r\n        let coordinates = this.pieceCanBeMove(piece)\r\n\r\n        if (coordinates) {\r\n            piece.mergeData = coordinates\r\n            this.setState({ piece })\r\n        } else {\r\n            let isPositionUpdate = false\r\n            // console.log(piece)\r\n\r\n            if (piece.posX < 0) {\r\n                piece.posX = 0\r\n                isPositionUpdate = true\r\n            }\r\n            else if (piece.grid[0].length + piece.posX > this.state.gridWidth) {\r\n                // console.log(piece.grid[0].length + piece.posX)\r\n                piece.posX = this.state.gridWidth - piece.grid[0].length\r\n                isPositionUpdate = true\r\n            } else if (piece.posY < 0) {\r\n                piece.posY = 0\r\n                isPositionUpdate = true\r\n            }\r\n\r\n            if (isPositionUpdate) {\r\n                coordinates = this.pieceCanBeMove(piece)\r\n\r\n                if (coordinates) {\r\n                    piece.mergeData = coordinates\r\n                    this.setState({ piece })\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    // rotatePieceToRight = () => {\r\n    //     const piece = { ...this.state.piece }\r\n    //     // console.log(piece)\r\n\r\n    //     if (piece === null) return false\r\n\r\n    //     let rotatedGrid = []\r\n\r\n    //     for (let x = 0; x < piece.grid[0].length; x++) {\r\n    //         const line = []\r\n    //         for (let y = piece.grid.length - 1; y > -1; y--) {\r\n    //             // console.log(y + '_' + x, '=>', piece.grid[y][x])\r\n    //             line.push(piece.grid[y][x])\r\n    //         }\r\n    //         rotatedGrid.push(line)\r\n    //     }\r\n\r\n    //     piece.grid = rotatedGrid\r\n\r\n    //     const coordinates = this.pieceCanBeMove(piece)\r\n\r\n    //     if (coordinates) {\r\n    //         piece.mergeData = coordinates\r\n    //         this.setState({ piece })\r\n    //     } else {\r\n    //         console.log('you can not rotatez ')\r\n    //     }\r\n    // }\r\n\r\n    // rotatePieceToLeft = () => {\r\n\r\n    //     const piece = { ...this.state.piece }\r\n\r\n    //     if (!piece) return false\r\n\r\n    //     const rotatedGrid = []\r\n\r\n    //     for (let x = piece.grid[0].length - 1; x > -1; x--) {\r\n    //         const line = []\r\n    //         for (let y = 0; y < piece.grid.length; y++) {\r\n    //             line.push(piece.grid[y][x])\r\n    //         }\r\n    //         rotatedGrid.push(line)\r\n    //     }\r\n\r\n    //     piece.grid = rotatedGrid\r\n\r\n    //     const coordinates = this.pieceCanBeMove(piece)\r\n\r\n    //     if (coordinates) {\r\n    //         piece.mergeData = coordinates\r\n    //         this.setState({ piece })\r\n    //     } else {\r\n    //         console.log('you can not rotatez ')\r\n    //     }\r\n    // }\r\n\r\n    cleanGridLine = (grid) => {\r\n\r\n        const cleanGrid = []\r\n        let clearLines = 0\r\n\r\n        for (let y = 0; y < this.state.gridHeight; y++) {\r\n            let lineCompleted = true\r\n            for (let x = 0; x < this.state.gridWidth; x++) {\r\n\r\n                if (grid[y][x] === 0) {\r\n                    lineCompleted = false\r\n                }\r\n            }\r\n\r\n            if (lineCompleted === false) {\r\n                cleanGrid.push(grid[y])\r\n            }\r\n        }\r\n\r\n        clearLines = this.state.grid.length - cleanGrid.length\r\n\r\n        for (let line = 0; line < clearLines; line++) {\r\n            cleanGrid.unshift(createLine(this.state.gridWidth))\r\n        }\r\n\r\n        function createLine(width) {\r\n            const line = []\r\n            for (let i = 0; i < width; i++) {\r\n                line.push(0)\r\n            }\r\n            cleanGridSound.play()\r\n            return line\r\n        }\r\n\r\n        return { clearLines, cleanGrid }\r\n    }\r\n\r\n    pauseGame = () => {\r\n        clearInterval(this.timerID)\r\n        console.log(this.timerID)\r\n        this.setState({ paused: true })\r\n    }\r\n\r\n    resumeGame = () => {\r\n        clearInterval(this.timerID)\r\n        this.setState({ paused: false })\r\n        this.setTimer()\r\n    }\r\n\r\n    StartGame = () => {\r\n        this.initGame()\r\n    }\r\n\r\n    restartGame = () => {\r\n        if (window.confirm('Are you sure?')) {\r\n            clearInterval(this.timerID)\r\n            this.initGame()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        // console.log(pieceCollection[this.state.nextPieceIndex])\r\n\r\n        return (\r\n            <>\r\n\r\n                {!this.state.gameRunning ? <StartGame clicked={this.StartGame} /> : null}\r\n\r\n                {this.state.paused || this.state.gameOver ?\r\n                    <MessagePopUp resumeGame={this.resumeGame} paused={this.state.paused} gameOver={this.state.gameOver} startGame={this.StartGame} /> :\r\n                    null}\r\n\r\n                <div id={css.tetris_container}>\r\n\r\n                    {\r\n                        this.state.grid ? (<Grid\r\n                            grid={this.state.grid}\r\n                            piece={this.state.piece} />) : null\r\n                    }\r\n\r\n                    <div className={css.right_div}>\r\n                        <h2>tetris</h2>\r\n                        <div className={css.next_piece}>\r\n                            <p>Next Piece</p>\r\n                            {\r\n                                this.state.nextPieceIndex !== null ? <NextPiece grid={pieceCollection[this.state.nextPieceIndex]} /> : ''\r\n                            }\r\n                        </div>\r\n\r\n                        <div className={css.scores}>\r\n                            <p>Clear Lines: <span>{this.state.clearLines}</span></p>\r\n                        </div>\r\n\r\n                        <div className={css.scores}>\r\n                            <p>High Score: <span>{this.state.heighScore}</span></p>\r\n                        </div>\r\n\r\n                        <div className={css.start_pause}>\r\n                            <button onClick={this.restartGame}>Restart</button>\r\n                            <button onClick={this.pauseGame}>Pause</button>\r\n                        </div>\r\n\r\n                        <div className={css.guide}>\r\n                            <div>\r\n                                x/z: Rotate\r\n                            </div>\r\n                            <div>\r\n                                <i className=\"bi bi-arrow-left\"></i> Left\r\n                            </div>\r\n                            <div>\r\n                                <i className=\"bi bi-arrow-right\"></i> Right\r\n                            </div>\r\n                            <div>\r\n                                <i className=\"bi bi-arrow-down\"></i> Down\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n\r\n                    <div className={css.controls}>\r\n                        <ControlButton disabled={this.state.paused}\r\n                            clicked={() => {\r\n                                if (this.state.piece)\r\n                                    this.rotatePiece('left')\r\n                            }} type=\"up\">up</ControlButton>\r\n\r\n                        <div>\r\n                            <ControlButton disabled={this.state.paused}\r\n                                clicked={() => {\r\n                                    if (this.state.piece)\r\n                                        this.pieceMoveToXAxis(-1)\r\n                                }} type=\"left\">left</ControlButton>\r\n\r\n                            <ControlButton disabled={this.state.paused}\r\n                                clicked={() => {\r\n                                    if (this.state.piece)\r\n                                        this.pieceMoveToXAxis(1)\r\n                                }} type=\"right\">Right</ControlButton>\r\n                        </div>\r\n\r\n                        <ControlButton disabled={this.state.paused}\r\n                            clicked={() => {\r\n                                if (this.state.piece)\r\n                                    this.pieceMoveToYAxis(1)\r\n                            }} type=\"down\">Down</ControlButton>\r\n                    </div>\r\n                    <small className={css.intro}>Programmed by <a href=\"https://github.com/gurwinder-git\" target=\"_blank\">Gurwinder Singh</a></small>\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App;\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n// const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\n\n\n// const store = createStore(reducers, composeEnhancers(\n//   applyMiddleware(thunk)\n// ))\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}